// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: h2mod.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "h2mod.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* H2ModPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  H2ModPacket_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* H2ModPacket_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* h2mod_set_grenade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  h2mod_set_grenade_reflection_ = NULL;
const ::google::protobuf::Descriptor* h2mod_auth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  h2mod_auth_reflection_ = NULL;
const ::google::protobuf::Descriptor* h2mod_set_team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  h2mod_set_team_reflection_ = NULL;
const ::google::protobuf::Descriptor* h2mod_get_map_download_url_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  h2mod_get_map_download_url_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_h2mod_2eproto() {
  protobuf_AddDesc_h2mod_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "h2mod.proto");
  GOOGLE_CHECK(file != NULL);
  H2ModPacket_descriptor_ = file->message_type(0);
  static const int H2ModPacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, h2auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, h2_set_player_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, set_grenade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, get_map_url_),
  };
  H2ModPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      H2ModPacket_descriptor_,
      H2ModPacket::default_instance_,
      H2ModPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(H2ModPacket));
  H2ModPacket_Type_descriptor_ = H2ModPacket_descriptor_->enum_type(0);
  h2mod_set_grenade_descriptor_ = file->message_type(1);
  static const int h2mod_set_grenade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_grenade, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_grenade, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_grenade, pindex_),
  };
  h2mod_set_grenade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      h2mod_set_grenade_descriptor_,
      h2mod_set_grenade::default_instance_,
      h2mod_set_grenade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_grenade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_grenade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(h2mod_set_grenade));
  h2mod_auth_descriptor_ = file->message_type(2);
  static const int h2mod_auth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_auth, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_auth, secureaddr_),
  };
  h2mod_auth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      h2mod_auth_descriptor_,
      h2mod_auth::default_instance_,
      h2mod_auth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_auth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_auth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(h2mod_auth));
  h2mod_set_team_descriptor_ = file->message_type(3);
  static const int h2mod_set_team_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_team, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_team, name_),
  };
  h2mod_set_team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      h2mod_set_team_descriptor_,
      h2mod_set_team::default_instance_,
      h2mod_set_team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(h2mod_set_team));
  h2mod_get_map_download_url_descriptor_ = file->message_type(4);
  static const int h2mod_get_map_download_url_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_get_map_download_url, url_),
  };
  h2mod_get_map_download_url_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      h2mod_get_map_download_url_descriptor_,
      h2mod_get_map_download_url::default_instance_,
      h2mod_get_map_download_url_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_get_map_download_url, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_get_map_download_url, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(h2mod_get_map_download_url));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_h2mod_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    H2ModPacket_descriptor_, &H2ModPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    h2mod_set_grenade_descriptor_, &h2mod_set_grenade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    h2mod_auth_descriptor_, &h2mod_auth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    h2mod_set_team_descriptor_, &h2mod_set_team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    h2mod_get_map_download_url_descriptor_, &h2mod_get_map_download_url::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_h2mod_2eproto() {
  delete H2ModPacket::default_instance_;
  delete H2ModPacket_reflection_;
  delete h2mod_set_grenade::default_instance_;
  delete h2mod_set_grenade_reflection_;
  delete h2mod_auth::default_instance_;
  delete h2mod_auth_reflection_;
  delete h2mod_set_team::default_instance_;
  delete h2mod_set_team_reflection_;
  delete h2mod_get_map_download_url::default_instance_;
  delete h2mod_get_map_download_url_reflection_;
}

void protobuf_AddDesc_h2mod_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013h2mod.proto\"\330\002\n\013H2ModPacket\022\037\n\004type\030\001 "
    "\002(\0162\021.H2ModPacket.Type\022\033\n\006h2auth\030\002 \001(\0132\013"
    ".h2mod_auth\022+\n\022h2_set_player_team\030\003 \001(\0132"
    "\017.h2mod_set_team\022\'\n\013set_grenade\030\004 \001(\0132\022."
    "h2mod_set_grenade\0220\n\013get_map_url\030\005 \001(\0132\033"
    ".h2mod_get_map_download_url\"\202\001\n\004Type\022\024\n\020"
    "authorize_client\020\002\022\023\n\017set_player_team\020\003\022"
    "\016\n\nh2mod_ping\020\004\022\016\n\nh2mod_pong\020\005\022\025\n\021set_u"
    "nit_grenades\020\006\022\030\n\024get_map_download_url\020\007"
    "\"@\n\021h2mod_set_grenade\022\014\n\004type\030\001 \002(\r\022\r\n\005c"
    "ount\030\002 \002(\r\022\016\n\006pIndex\030\003 \002(\r\".\n\nh2mod_auth"
    "\022\014\n\004name\030\001 \002(\014\022\022\n\nsecureaddr\030\002 \002(\r\",\n\016h2"
    "mod_set_team\022\014\n\004team\030\001 \002(\r\022\014\n\004name\030\002 \002(\014"
    "\")\n\032h2mod_get_map_download_url\022\013\n\003url\030\001 "
    "\001(\t", 563);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "h2mod.proto", &protobuf_RegisterTypes);
  H2ModPacket::default_instance_ = new H2ModPacket();
  h2mod_set_grenade::default_instance_ = new h2mod_set_grenade();
  h2mod_auth::default_instance_ = new h2mod_auth();
  h2mod_set_team::default_instance_ = new h2mod_set_team();
  h2mod_get_map_download_url::default_instance_ = new h2mod_get_map_download_url();
  H2ModPacket::default_instance_->InitAsDefaultInstance();
  h2mod_set_grenade::default_instance_->InitAsDefaultInstance();
  h2mod_auth::default_instance_->InitAsDefaultInstance();
  h2mod_set_team::default_instance_->InitAsDefaultInstance();
  h2mod_get_map_download_url::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_h2mod_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_h2mod_2eproto {
  StaticDescriptorInitializer_h2mod_2eproto() {
    protobuf_AddDesc_h2mod_2eproto();
  }
} static_descriptor_initializer_h2mod_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* H2ModPacket_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return H2ModPacket_Type_descriptor_;
}
bool H2ModPacket_Type_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const H2ModPacket_Type H2ModPacket::authorize_client;
const H2ModPacket_Type H2ModPacket::set_player_team;
const H2ModPacket_Type H2ModPacket::h2mod_ping;
const H2ModPacket_Type H2ModPacket::h2mod_pong;
const H2ModPacket_Type H2ModPacket::set_unit_grenades;
const H2ModPacket_Type H2ModPacket::get_map_download_url;
const H2ModPacket_Type H2ModPacket::Type_MIN;
const H2ModPacket_Type H2ModPacket::Type_MAX;
const int H2ModPacket::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int H2ModPacket::kTypeFieldNumber;
const int H2ModPacket::kH2AuthFieldNumber;
const int H2ModPacket::kH2SetPlayerTeamFieldNumber;
const int H2ModPacket::kSetGrenadeFieldNumber;
const int H2ModPacket::kGetMapUrlFieldNumber;
#endif  // !_MSC_VER

H2ModPacket::H2ModPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:H2ModPacket)
}

void H2ModPacket::InitAsDefaultInstance() {
  h2auth_ = const_cast< ::h2mod_auth*>(&::h2mod_auth::default_instance());
  h2_set_player_team_ = const_cast< ::h2mod_set_team*>(&::h2mod_set_team::default_instance());
  set_grenade_ = const_cast< ::h2mod_set_grenade*>(&::h2mod_set_grenade::default_instance());
  get_map_url_ = const_cast< ::h2mod_get_map_download_url*>(&::h2mod_get_map_download_url::default_instance());
}

H2ModPacket::H2ModPacket(const H2ModPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:H2ModPacket)
}

void H2ModPacket::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  h2auth_ = NULL;
  h2_set_player_team_ = NULL;
  set_grenade_ = NULL;
  get_map_url_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

H2ModPacket::~H2ModPacket() {
  // @@protoc_insertion_point(destructor:H2ModPacket)
  SharedDtor();
}

void H2ModPacket::SharedDtor() {
  if (this != default_instance_) {
    delete h2auth_;
    delete h2_set_player_team_;
    delete set_grenade_;
    delete get_map_url_;
  }
}

void H2ModPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* H2ModPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return H2ModPacket_descriptor_;
}

const H2ModPacket& H2ModPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_h2mod_2eproto();
  return *default_instance_;
}

H2ModPacket* H2ModPacket::default_instance_ = NULL;

H2ModPacket* H2ModPacket::New() const {
  return new H2ModPacket;
}

void H2ModPacket::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    type_ = 2;
    if (has_h2auth()) {
      if (h2auth_ != NULL) h2auth_->::h2mod_auth::Clear();
    }
    if (has_h2_set_player_team()) {
      if (h2_set_player_team_ != NULL) h2_set_player_team_->::h2mod_set_team::Clear();
    }
    if (has_set_grenade()) {
      if (set_grenade_ != NULL) set_grenade_->::h2mod_set_grenade::Clear();
    }
    if (has_get_map_url()) {
      if (get_map_url_ != NULL) get_map_url_->::h2mod_get_map_download_url::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool H2ModPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:H2ModPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .H2ModPacket.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::H2ModPacket_Type_IsValid(value)) {
            set_type(static_cast< ::H2ModPacket_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_h2auth;
        break;
      }

      // optional .h2mod_auth h2auth = 2;
      case 2: {
        if (tag == 18) {
         parse_h2auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_h2auth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_h2_set_player_team;
        break;
      }

      // optional .h2mod_set_team h2_set_player_team = 3;
      case 3: {
        if (tag == 26) {
         parse_h2_set_player_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_h2_set_player_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_set_grenade;
        break;
      }

      // optional .h2mod_set_grenade set_grenade = 4;
      case 4: {
        if (tag == 34) {
         parse_set_grenade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_grenade()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_get_map_url;
        break;
      }

      // optional .h2mod_get_map_download_url get_map_url = 5;
      case 5: {
        if (tag == 42) {
         parse_get_map_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_map_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:H2ModPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:H2ModPacket)
  return false;
#undef DO_
}

void H2ModPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:H2ModPacket)
  // required .H2ModPacket.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .h2mod_auth h2auth = 2;
  if (has_h2auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->h2auth(), output);
  }

  // optional .h2mod_set_team h2_set_player_team = 3;
  if (has_h2_set_player_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->h2_set_player_team(), output);
  }

  // optional .h2mod_set_grenade set_grenade = 4;
  if (has_set_grenade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->set_grenade(), output);
  }

  // optional .h2mod_get_map_download_url get_map_url = 5;
  if (has_get_map_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->get_map_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:H2ModPacket)
}

::google::protobuf::uint8* H2ModPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:H2ModPacket)
  // required .H2ModPacket.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .h2mod_auth h2auth = 2;
  if (has_h2auth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->h2auth(), target);
  }

  // optional .h2mod_set_team h2_set_player_team = 3;
  if (has_h2_set_player_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->h2_set_player_team(), target);
  }

  // optional .h2mod_set_grenade set_grenade = 4;
  if (has_set_grenade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->set_grenade(), target);
  }

  // optional .h2mod_get_map_download_url get_map_url = 5;
  if (has_get_map_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->get_map_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:H2ModPacket)
  return target;
}

int H2ModPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .H2ModPacket.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .h2mod_auth h2auth = 2;
    if (has_h2auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->h2auth());
    }

    // optional .h2mod_set_team h2_set_player_team = 3;
    if (has_h2_set_player_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->h2_set_player_team());
    }

    // optional .h2mod_set_grenade set_grenade = 4;
    if (has_set_grenade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_grenade());
    }

    // optional .h2mod_get_map_download_url get_map_url = 5;
    if (has_get_map_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_map_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void H2ModPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const H2ModPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const H2ModPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void H2ModPacket::MergeFrom(const H2ModPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_h2auth()) {
      mutable_h2auth()->::h2mod_auth::MergeFrom(from.h2auth());
    }
    if (from.has_h2_set_player_team()) {
      mutable_h2_set_player_team()->::h2mod_set_team::MergeFrom(from.h2_set_player_team());
    }
    if (from.has_set_grenade()) {
      mutable_set_grenade()->::h2mod_set_grenade::MergeFrom(from.set_grenade());
    }
    if (from.has_get_map_url()) {
      mutable_get_map_url()->::h2mod_get_map_download_url::MergeFrom(from.get_map_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void H2ModPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void H2ModPacket::CopyFrom(const H2ModPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H2ModPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_h2auth()) {
    if (!this->h2auth().IsInitialized()) return false;
  }
  if (has_h2_set_player_team()) {
    if (!this->h2_set_player_team().IsInitialized()) return false;
  }
  if (has_set_grenade()) {
    if (!this->set_grenade().IsInitialized()) return false;
  }
  return true;
}

void H2ModPacket::Swap(H2ModPacket* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(h2auth_, other->h2auth_);
    std::swap(h2_set_player_team_, other->h2_set_player_team_);
    std::swap(set_grenade_, other->set_grenade_);
    std::swap(get_map_url_, other->get_map_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata H2ModPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = H2ModPacket_descriptor_;
  metadata.reflection = H2ModPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int h2mod_set_grenade::kTypeFieldNumber;
const int h2mod_set_grenade::kCountFieldNumber;
const int h2mod_set_grenade::kPIndexFieldNumber;
#endif  // !_MSC_VER

h2mod_set_grenade::h2mod_set_grenade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:h2mod_set_grenade)
}

void h2mod_set_grenade::InitAsDefaultInstance() {
}

h2mod_set_grenade::h2mod_set_grenade(const h2mod_set_grenade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:h2mod_set_grenade)
}

void h2mod_set_grenade::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  count_ = 0u;
  pindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

h2mod_set_grenade::~h2mod_set_grenade() {
  // @@protoc_insertion_point(destructor:h2mod_set_grenade)
  SharedDtor();
}

void h2mod_set_grenade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void h2mod_set_grenade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* h2mod_set_grenade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return h2mod_set_grenade_descriptor_;
}

const h2mod_set_grenade& h2mod_set_grenade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_h2mod_2eproto();
  return *default_instance_;
}

h2mod_set_grenade* h2mod_set_grenade::default_instance_ = NULL;

h2mod_set_grenade* h2mod_set_grenade::New() const {
  return new h2mod_set_grenade;
}

void h2mod_set_grenade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<h2mod_set_grenade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, pindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool h2mod_set_grenade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:h2mod_set_grenade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pIndex;
        break;
      }

      // required uint32 pIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_pIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pindex_)));
          set_has_pindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:h2mod_set_grenade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:h2mod_set_grenade)
  return false;
#undef DO_
}

void h2mod_set_grenade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:h2mod_set_grenade)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 pIndex = 3;
  if (has_pindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:h2mod_set_grenade)
}

::google::protobuf::uint8* h2mod_set_grenade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2mod_set_grenade)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 pIndex = 3;
  if (has_pindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2mod_set_grenade)
  return target;
}

int h2mod_set_grenade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 pIndex = 3;
    if (has_pindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void h2mod_set_grenade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const h2mod_set_grenade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const h2mod_set_grenade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void h2mod_set_grenade::MergeFrom(const h2mod_set_grenade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_pindex()) {
      set_pindex(from.pindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void h2mod_set_grenade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void h2mod_set_grenade::CopyFrom(const h2mod_set_grenade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool h2mod_set_grenade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void h2mod_set_grenade::Swap(h2mod_set_grenade* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(pindex_, other->pindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata h2mod_set_grenade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = h2mod_set_grenade_descriptor_;
  metadata.reflection = h2mod_set_grenade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int h2mod_auth::kNameFieldNumber;
const int h2mod_auth::kSecureaddrFieldNumber;
#endif  // !_MSC_VER

h2mod_auth::h2mod_auth()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:h2mod_auth)
}

void h2mod_auth::InitAsDefaultInstance() {
}

h2mod_auth::h2mod_auth(const h2mod_auth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:h2mod_auth)
}

void h2mod_auth::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secureaddr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

h2mod_auth::~h2mod_auth() {
  // @@protoc_insertion_point(destructor:h2mod_auth)
  SharedDtor();
}

void h2mod_auth::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void h2mod_auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* h2mod_auth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return h2mod_auth_descriptor_;
}

const h2mod_auth& h2mod_auth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_h2mod_2eproto();
  return *default_instance_;
}

h2mod_auth* h2mod_auth::default_instance_ = NULL;

h2mod_auth* h2mod_auth::New() const {
  return new h2mod_auth;
}

void h2mod_auth::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    secureaddr_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool h2mod_auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:h2mod_auth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_secureaddr;
        break;
      }

      // required uint32 secureaddr = 2;
      case 2: {
        if (tag == 16) {
         parse_secureaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secureaddr_)));
          set_has_secureaddr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:h2mod_auth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:h2mod_auth)
  return false;
#undef DO_
}

void h2mod_auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:h2mod_auth)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 secureaddr = 2;
  if (has_secureaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->secureaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:h2mod_auth)
}

::google::protobuf::uint8* h2mod_auth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2mod_auth)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // required uint32 secureaddr = 2;
  if (has_secureaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->secureaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2mod_auth)
  return target;
}

int h2mod_auth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 secureaddr = 2;
    if (has_secureaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secureaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void h2mod_auth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const h2mod_auth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const h2mod_auth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void h2mod_auth::MergeFrom(const h2mod_auth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_secureaddr()) {
      set_secureaddr(from.secureaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void h2mod_auth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void h2mod_auth::CopyFrom(const h2mod_auth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool h2mod_auth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void h2mod_auth::Swap(h2mod_auth* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(secureaddr_, other->secureaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata h2mod_auth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = h2mod_auth_descriptor_;
  metadata.reflection = h2mod_auth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int h2mod_set_team::kTeamFieldNumber;
const int h2mod_set_team::kNameFieldNumber;
#endif  // !_MSC_VER

h2mod_set_team::h2mod_set_team()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:h2mod_set_team)
}

void h2mod_set_team::InitAsDefaultInstance() {
}

h2mod_set_team::h2mod_set_team(const h2mod_set_team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:h2mod_set_team)
}

void h2mod_set_team::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

h2mod_set_team::~h2mod_set_team() {
  // @@protoc_insertion_point(destructor:h2mod_set_team)
  SharedDtor();
}

void h2mod_set_team::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void h2mod_set_team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* h2mod_set_team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return h2mod_set_team_descriptor_;
}

const h2mod_set_team& h2mod_set_team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_h2mod_2eproto();
  return *default_instance_;
}

h2mod_set_team* h2mod_set_team::default_instance_ = NULL;

h2mod_set_team* h2mod_set_team::New() const {
  return new h2mod_set_team;
}

void h2mod_set_team::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    team_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool h2mod_set_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:h2mod_set_team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:h2mod_set_team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:h2mod_set_team)
  return false;
#undef DO_
}

void h2mod_set_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:h2mod_set_team)
  // required uint32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:h2mod_set_team)
}

::google::protobuf::uint8* h2mod_set_team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2mod_set_team)
  // required uint32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2mod_set_team)
  return target;
}

int h2mod_set_team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void h2mod_set_team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const h2mod_set_team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const h2mod_set_team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void h2mod_set_team::MergeFrom(const h2mod_set_team& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void h2mod_set_team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void h2mod_set_team::CopyFrom(const h2mod_set_team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool h2mod_set_team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void h2mod_set_team::Swap(h2mod_set_team* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata h2mod_set_team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = h2mod_set_team_descriptor_;
  metadata.reflection = h2mod_set_team_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int h2mod_get_map_download_url::kUrlFieldNumber;
#endif  // !_MSC_VER

h2mod_get_map_download_url::h2mod_get_map_download_url()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:h2mod_get_map_download_url)
}

void h2mod_get_map_download_url::InitAsDefaultInstance() {
}

h2mod_get_map_download_url::h2mod_get_map_download_url(const h2mod_get_map_download_url& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:h2mod_get_map_download_url)
}

void h2mod_get_map_download_url::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

h2mod_get_map_download_url::~h2mod_get_map_download_url() {
  // @@protoc_insertion_point(destructor:h2mod_get_map_download_url)
  SharedDtor();
}

void h2mod_get_map_download_url::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void h2mod_get_map_download_url::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* h2mod_get_map_download_url::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return h2mod_get_map_download_url_descriptor_;
}

const h2mod_get_map_download_url& h2mod_get_map_download_url::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_h2mod_2eproto();
  return *default_instance_;
}

h2mod_get_map_download_url* h2mod_get_map_download_url::default_instance_ = NULL;

h2mod_get_map_download_url* h2mod_get_map_download_url::New() const {
  return new h2mod_get_map_download_url;
}

void h2mod_get_map_download_url::Clear() {
  if (has_url()) {
    if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      url_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool h2mod_get_map_download_url::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:h2mod_get_map_download_url)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:h2mod_get_map_download_url)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:h2mod_get_map_download_url)
  return false;
#undef DO_
}

void h2mod_get_map_download_url::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:h2mod_get_map_download_url)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:h2mod_get_map_download_url)
}

::google::protobuf::uint8* h2mod_get_map_download_url::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2mod_get_map_download_url)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2mod_get_map_download_url)
  return target;
}

int h2mod_get_map_download_url::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void h2mod_get_map_download_url::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const h2mod_get_map_download_url* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const h2mod_get_map_download_url*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void h2mod_get_map_download_url::MergeFrom(const h2mod_get_map_download_url& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void h2mod_get_map_download_url::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void h2mod_get_map_download_url::CopyFrom(const h2mod_get_map_download_url& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool h2mod_get_map_download_url::IsInitialized() const {

  return true;
}

void h2mod_get_map_download_url::Swap(h2mod_get_map_download_url* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata h2mod_get_map_download_url::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = h2mod_get_map_download_url_descriptor_;
  metadata.reflection = h2mod_get_map_download_url_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
